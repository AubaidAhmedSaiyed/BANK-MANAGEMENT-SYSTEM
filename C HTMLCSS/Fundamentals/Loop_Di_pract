#include <stdio.h>

int main() {
    // Write C code here
    /// Table of given n number
    int n ;
    printf("Enter a number:");
    scanf("%d",&n);
    printf("The Table of given number %d:\n",n);
    for(int i=1;i<11;i++){
       printf("%d X %d = %d\n",n,i,n*i); /// %d == variables
    }

    return 0;
}



#include <stdio.h>

int main() {
    // Write C code here
    /// Table of given n number
    int n ;
    printf("Enter a number:");
    scanf("%d",&n);
    printf("The Table of given number %d:\n",n);
    for(int i=10;i>=1;i--){ /// since i = 10 , when minus then i=9 SO i>=1 is condtion that till i = 1 this loop will run
    /// or replace i>=1 to i only
       printf("%d X %d = %d\n",n,i,n*i); /// %d == variables
    }

    return 0;
}




#include <stdio.h>

int main() {
    // Write C code here
    /// SUM OF FIRST n NATURAL NUMBER USING WHILE
    int n, i = 1;
    printf("Enter value of n:");
    scanf("%d",&n);
    int sum =0;
    while(i<=n){
        sum = sum + i;
        i++;
        
    }
    printf("Sum of FIrst %d natursal number is:\n",n);
    printf("%d",sum);

    
    return 0;
}




#include <stdio.h>

int main() {
    // Write C code here
    /// SUM OF FIRST n NATURAL NUMBER USING  for 
    int n, i = 1;
    printf("Enter value of n:");
    scanf("%d",&n);
    int sum =0;
    for(int i=1;i<=n;i++){
        sum+=i;
        
    }
    printf("Sum of FIrst %d natursal number is:\n",n);
    printf("%d",sum);

    
    return 0;
}





#include <stdio.h>

int main() {
    // Write C code here
    /// SUM OF FIRST n NATURAL NUMBER USING  do-while
    int n, i = 1;
    printf("Enter value of n:");
    scanf("%d",&n);
    int sum =0;
    do{
        sum+=i;
        i++;
    } while(i<=n);
    printf("Sum of FIrst %d natursal number is:\n",n);
    printf("%d",sum);

    
    return 0;
}





#include <stdio.h>

int main() {
    // Write C code here
    /// sum of number in table of n number
    int n;
    printf("Enter value of n:");
    scanf("%d",&n);
    int sum =0;
    for(int i=1;i<=10;i++){
        sum = sum +(i*n);
    }
    printf("Sum of number in table of  %d  is:\n",n);
    printf("%d",sum);

    
    return 0;
}





#include <stdio.h>

int main() {
    // Write C code here
    /// FACTORIAL
    int n;
    printf("ENTER NUMBER TO CALCULATE FACTORIAL:");
    scanf("%d",&n);
    int fact = 1;
    if(n==0){
        printf("Not Allowed!");
        
    }
    else{
        for(int i=1;i<=n;i++){ /// fact : 4 = 4*3*2*1
            fact = fact*i;
        }
            
    }
           

    printf("%d",fact);
    return 0;
}





#include <stdio.h>

int main() {
    // Write C code here
    /// FACTORIAL - while
    int n ;
    printf("Enter :");
    scanf("%d",&n);
    int i=1;
    int fact=1;
    while(i<=n){
        fact*=i;
        i++;
        
    }
    printf("%d",fact);
    return 0;
}





#include <stdio.h>

int main() {
    // Write C code here
    /// PRIME OR NOT
    int n;
    printf("enter number to check:");
    scanf("%d",&n);
    int count =0;
    for(int i=1;i<=n;i++){
        if(n%i==0){
            count=count+1;
        }
    
    }
    if(count==2){
        printf("Prime!");
    }
    else{
        printf("Not Prime!");
    }
    return 0;
}




#include <stdio.h>#include <stdio.h>

int main() {
    // Write C code here
    /// PRIME OR NOT - while
    int n,i=1;
    printf("enter number to check:");
    scanf("%d",&n);
    int count =0;
    while(i<=n){
        if(n%i==0){
            count+=1;
        }
        i++;
    }
    if(count==2){
        printf("Prime!");
    }
    else{
        printf("Not Prime!");
    }
    return 0;
}





#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int main() {
    // Write C code here
    /// initialize random generator
    srand(time(0));
    
    int RandNumb = (rand()%100) + 1;  // %100 will generate from 0-99 then +1 will make it 1-100
    printf("A number is generated !\n");
    int n;
    int count=1;
    printf("Guess the number:");
    scanf("%d",&n);
    
    do{
        printf("Guess the number:");
        scanf("%d",&n);
        count+=1;
        if(n>RandNumb){
            printf("lower number please!\n");
        }
        else if(n<RandNumb){
            printf("Higher number please!\n");
        }
        
    }while(n!=RandNumb);
    printf("Correct!  Random Number is :%d\n",n);
    printf("Your Total Guesses:%d",count);
    
    return 0;
}



// sum of square of number 

void sq(i);
void sq(i){
    c = i*i;
    return c;
}
int main(){
    int sum = 0;
    for(int i = 1;i<=n;i++){
        sum = sum + sq(i);
    }
    printf("%d",sum);
}

// amrstrong number
 153= 1*1*1 +3*3*3+5*5*5 

#include <stdio.h>
void sq();
void sq(){
    int c = digit*digit*digit;
    printf("%d",c);
}
int main() {
    // Write C code here
    printf("Try programiz.pro\n");
    int m = 153,digit,n,sum= 0;
    n = m;
    while(n>0){
        digit = n%10;// las digit give
        printf("%d\n",digit);
        sum = sum + sq(digit);
        printf("%d\n",sum);
        n = n/10;  // deduct lst digit from number
    }
    if(sum == m){
        printf("Amrstrong !");
    }
    else{
        printf("No");
    }

    return 0;
}


The `*` operator in the context of reversing a number in C is used for **multiplying** and is crucial for building the reversed number. Here's why itâ€™s used:

### Purpose of `*` in Reversing a Number

1. **Shifting Digits:**
   - Each time a new digit is added to the reversed number, the existing digits in `reversed` need to be shifted to the left to make room for the new digit.
   - Multiplying by `10` shifts the digits left by one place. For example, if `reversed` is `432` and you want to add a new digit `1`, multiplying `432` by `10` makes it `4320`. Adding `1` then results in `4321`.

2. **Constructing the Reversed Number:**
   - The `reversed` number is constructed digit by digit from the original number. To ensure each new digit is placed in the correct position, the existing number needs to be multiplied by `10` before adding the new digit.

### Example

Let's go through an example to clarify:

1. **Initial Setup:**
   - Suppose you start with `n = 1234` and `reversed = 0`.

2. **First Iteration:**
   - Extract the last digit: `4` (from `1234 % 10`).
   - Update `reversed`:
     ```c
     reversed = reversed * 10 + 4;
     ```
     - Here, `reversed * 10` is `0 * 10 = 0`.
     - Add `4`: `0 + 4 = 4`.
   - Now, `reversed` is `4`.

3. **Second Iteration:**
   - `temp` is now `123`.
   - Extract the last digit: `3` (from `123 % 10`).
   - Update `reversed`:
     ```c
     reversed = reversed * 10 + 3;
     ```
     - Here, `reversed * 10` is `4 * 10 = 40`.
     - Add `3`: `40 + 3 = 43`.
   - Now, `reversed` is `43`.

4. **Third Iteration:**
   - `temp` is now `12`.
   - Extract the last digit: `2` (from `12 % 10`).
   - Update `reversed`:
     ```c
     reversed = reversed * 10 + 2;
     ```
     - Here, `reversed * 10` is `43 * 10 = 430`.
     - Add `2`: `430 + 2 = 432`.
   - Now, `reversed` is `432`.

5. **Fourth Iteration:**
   - `temp` is now `1`.
   - Extract the last digit: `1` (from `1 % 10`).
   - Update `reversed`:
     ```c
     reversed = reversed * 10 + 1;
     ```
     - Here, `reversed * 10` is `432 * 10 = 4320`.
     - Add `1`: `4320 + 1 = 4321`.
   - Now, `reversed` is `4321`.

### Summary

- **Shifting:** The `* 10` operation shifts the existing digits of the `reversed` number to the left by one place, making room for the new digit.
- **Appending:** After shifting, the new digit is added to the end of the `reversed` number.

The multiplication by `10` is essential for correctly building the reversed number by ensuring that each digit is placed in its correct position in the new number.

// magic number 

#include<stdio.h>
int main() {
    // Write C code here
    
    int m = 1729,digit,n,r,sum= 0,summ;
    n = m;
    while(n>0){
        digit = n%10;// las digit give
        printf("%d\n",digit);
        sum = sum + digit;
        printf("%d\n",sum);
        n = n/10;  // deduct lst digit from number
        
    }
    printf("------%d\n",sum);
    summ = sum;
    while(summ>0){
        digit = summ%10;// las digit give
        printf("%d\n",digit);
        r = r*10 + digit;
        printf("%d\n",r);
        summ = summ/10;  
        
    }
    printf("------%d\n",sum*r);
    if(sum*r==m){
        printf(" magic number!");
    }
    else{
        printf("No");
    }

    return 0;
}



// range

for (int i = a;i <= b; i++ ){
        printf((i==1)?"one": (i==2)?"two":(i==3)?"three"
        :(i==4)?"four":(i==5)?"five":(i==6)?"six"
        :(i==7)?"seven":(i==8)?"eight":(i==9)?"nine"
        : (i%2==0)?"even":"odd");
        printf("\n");
    }



// for calaculating marks base on even odd index of array
//Complete the following function.

int marks_summation(int* marks, int number_of_students, char gender) {
  //Write your code here.
  int sum=0;
        
      if(gender=='g'){
          for(int i=1;i<=number_of_students;i=i+2){
              
              sum = sum + marks[i];  
               
              
          }
         
          
      }
          
        
      if(gender=='b'){
          for(int i = 0;i<=number_of_students;i=i+2){
              sum = sum + marks[i];
              
              
          }
          
          
      }
      return sum;  // remember : return at the end of function in case of normal one 
          
    
    
} 